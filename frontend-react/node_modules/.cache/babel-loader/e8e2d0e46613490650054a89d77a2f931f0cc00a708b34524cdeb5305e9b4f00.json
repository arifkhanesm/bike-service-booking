{"ast":null,"code":"import axios from 'axios';\n\n// Determine the API URL based on the environment\nconst getApiUrl = () => {\n  const hostname = window.location.hostname;\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return 'http://localhost:8080/api';\n  }\n  // For mobile devices using local network\n  return `http://${hostname}:8080/api`;\n};\nconst API_URL = getApiUrl();\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true,\n  timeout: 10000 // 10 second timeout\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.set('Authorization', `Bearer ${token}`);\n  }\n  // Log request details in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Request:', {\n      url: config.url,\n      method: config.method,\n      headers: config.headers,\n      data: config.data\n    });\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => {\n  // Log response in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Response:', {\n      status: response.status,\n      headers: response.headers,\n      data: response.data\n    });\n  }\n  return response;\n}, error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    console.error('Response data:', error.response.data);\n    console.error('Response status:', error.response.status);\n    console.error('Response headers:', error.response.headers);\n  } else if (error.request) {\n    console.error('No response received:', error.request);\n  } else {\n    console.error('Error setting up request:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport const bookingService = {\n  createBooking: bookingData => {\n    return api.post('/bookings', bookingData);\n  },\n  getAllBookings: () => {\n    return api.get('/bookings');\n  },\n  getBookingById: id => {\n    return api.get(`/bookings/${id}`);\n  },\n  updateBooking: (id, bookingData) => {\n    return api.put(`/bookings/update/${id}`, bookingData);\n  },\n  deleteBooking: id => {\n    return api.delete(`/bookings/${id}`);\n  }\n};","map":{"version":3,"names":["axios","getApiUrl","hostname","window","location","API_URL","api","create","baseURL","headers","withCredentials","timeout","interceptors","request","use","config","token","localStorage","getItem","set","process","env","NODE_ENV","console","log","url","method","data","error","Promise","reject","response","status","message","bookingService","createBooking","bookingData","post","getAllBookings","get","getBookingById","id","updateBooking","put","deleteBooking","delete"],"sources":["/Users/arifkhan/bike-service-booking/frontend-react/src/services/bookingService.ts"],"sourcesContent":["import axios, { AxiosRequestConfig, InternalAxiosRequestConfig } from 'axios';\n\n// Determine the API URL based on the environment\nconst getApiUrl = () => {\n  const hostname = window.location.hostname;\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return 'http://localhost:8080/api';\n  }\n  // For mobile devices using local network\n  return `http://${hostname}:8080/api`;\n};\n\nconst API_URL = getApiUrl();\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  withCredentials: true,\n  timeout: 10000, // 10 second timeout\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.set('Authorization', `Bearer ${token}`);\n  }\n  // Log request details in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Request:', {\n      url: config.url,\n      method: config.method,\n      headers: config.headers,\n      data: config.data\n    });\n  }\n  return config;\n}, (error) => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => {\n    // Log response in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Response:', {\n        status: response.status,\n        headers: response.headers,\n        data: response.data\n      });\n    }\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error);\n    if (error.response) {\n      console.error('Response data:', error.response.data);\n      console.error('Response status:', error.response.status);\n      console.error('Response headers:', error.response.headers);\n    } else if (error.request) {\n      console.error('No response received:', error.request);\n    } else {\n      console.error('Error setting up request:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport interface BookingRequest {\n  customerEmail: string;\n  customerName: string;\n  customerPhone: string;\n  bikeBrand: string;\n  bikeModel: string;\n  manufactureYear: string;\n  appointmentDate: string;\n  serviceType: string;\n  notes?: string;\n  bookingStatus: 'PENDING' | 'CONFIRMED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED';\n}\n\nexport interface BookingResponse {\n  id: number;\n  customerEmail: string;\n  customerName: string;\n  customerPhone: string;\n  bikeBrand: string;\n  bikeModel: string;\n  manufactureYear: string;\n  appointmentDate: string;\n  serviceType: string;\n  notes?: string;\n  status: 'PENDING' | 'CONFIRMED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED';\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const bookingService = {\n  createBooking: (bookingData: BookingRequest) => {\n    return api.post<BookingResponse>('/bookings', bookingData);\n  },\n\n  getAllBookings: () => {\n    return api.get<BookingResponse[]>('/bookings');\n  },\n\n  getBookingById: (id: number) => {\n    return api.get<BookingResponse>(`/bookings/${id}`);\n  },\n\n  updateBooking: (id: number, bookingData: BookingRequest) => {\n    return api.put<BookingResponse>(`/bookings/update/${id}`, bookingData);\n  },\n\n  deleteBooking: (id: number) => {\n    return api.delete(`/bookings/${id}`);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}