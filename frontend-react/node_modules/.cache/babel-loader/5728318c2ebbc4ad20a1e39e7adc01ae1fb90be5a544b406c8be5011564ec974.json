{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.set('Authorization', `Bearer ${token}`);\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    console.error('Response data:', error.response.data);\n    console.error('Response status:', error.response.status);\n    console.error('Response headers:', error.response.headers);\n  }\n  return Promise.reject(error);\n});\nexport const bookingService = {\n  createBooking: bookingData => {\n    return api.post('/bookings', bookingData);\n  },\n  getAllBookings: () => {\n    return api.get('/bookings');\n  },\n  getBookingById: id => {\n    return api.get(`/bookings/${id}`);\n  },\n  updateBooking: (id, bookingData) => {\n    return api.put(`/bookings/update/${id}`, bookingData);\n  },\n  deleteBooking: id => {\n    return api.delete(`/bookings/${id}`);\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","set","error","Promise","reject","response","console","data","status","bookingService","createBooking","bookingData","post","getAllBookings","get","getBookingById","id","updateBooking","put","deleteBooking","delete"],"sources":["/Users/arifkhan/bike-service-booking/frontend-react/src/services/bookingService.ts"],"sourcesContent":["import axios, { AxiosRequestConfig, InternalAxiosRequestConfig } from 'axios';\n\nconst API_URL = 'http://localhost:8080/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  withCredentials: true\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.set('Authorization', `Bearer ${token}`);\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    if (error.response) {\n      console.error('Response data:', error.response.data);\n      console.error('Response status:', error.response.status);\n      console.error('Response headers:', error.response.headers);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport interface BookingRequest {\n  customerEmail: string;\n  customerName: string;\n  customerPhone: string;\n  bikeBrand: string;\n  bikeModel: string;\n  manufactureYear: string;\n  appointmentDate: string;\n  serviceType: string;\n  notes?: string;\n  bookingStatus: 'PENDING' | 'CONFIRMED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED';\n}\n\nexport interface BookingResponse {\n  id: number;\n  customerEmail: string;\n  customerName: string;\n  customerPhone: string;\n  bikeBrand: string;\n  bikeModel: string;\n  manufactureYear: string;\n  appointmentDate: string;\n  serviceType: string;\n  notes?: string;\n  status: 'PENDING' | 'CONFIRMED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED';\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const bookingService = {\n  createBooking: (bookingData: BookingRequest) => {\n    return api.post<BookingResponse>('/bookings', bookingData);\n  },\n\n  getAllBookings: () => {\n    return api.get<BookingResponse[]>('/bookings');\n  },\n\n  getBookingById: (id: number) => {\n    return api.get<BookingResponse>(`/bookings/${id}`);\n  },\n\n  updateBooking: (id: number, bookingData: BookingRequest) => {\n    return api.put<BookingResponse>(`/bookings/update/${id}`, bookingData);\n  },\n\n  deleteBooking: (id: number) => {\n    return api.delete(`/bookings/${id}`);\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAA0D,OAAO;AAE7E,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAkC,IAAK;EACnE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,GAAG,CAAC,eAAe,EAAE,UAAUH,KAAK,EAAE,CAAC;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EAAGK,KAAK,IAAK;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAb,GAAG,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACTI,OAAO,CAACJ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClBC,OAAO,CAACJ,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACG,QAAQ,CAACE,IAAI,CAAC;IACpDD,OAAO,CAACJ,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACG,QAAQ,CAACG,MAAM,CAAC;IACxDF,OAAO,CAACJ,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACG,QAAQ,CAACb,OAAO,CAAC;EAC5D;EACA,OAAOW,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AA+BD,OAAO,MAAMO,cAAc,GAAG;EAC5BC,aAAa,EAAGC,WAA2B,IAAK;IAC9C,OAAOtB,GAAG,CAACuB,IAAI,CAAkB,WAAW,EAAED,WAAW,CAAC;EAC5D,CAAC;EAEDE,cAAc,EAAEA,CAAA,KAAM;IACpB,OAAOxB,GAAG,CAACyB,GAAG,CAAoB,WAAW,CAAC;EAChD,CAAC;EAEDC,cAAc,EAAGC,EAAU,IAAK;IAC9B,OAAO3B,GAAG,CAACyB,GAAG,CAAkB,aAAaE,EAAE,EAAE,CAAC;EACpD,CAAC;EAEDC,aAAa,EAAEA,CAACD,EAAU,EAAEL,WAA2B,KAAK;IAC1D,OAAOtB,GAAG,CAAC6B,GAAG,CAAkB,oBAAoBF,EAAE,EAAE,EAAEL,WAAW,CAAC;EACxE,CAAC;EAEDQ,aAAa,EAAGH,EAAU,IAAK;IAC7B,OAAO3B,GAAG,CAAC+B,MAAM,CAAC,aAAaJ,EAAE,EAAE,CAAC;EACtC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}